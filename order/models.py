from django.core.validators import MinValueValidator
from django.db import models
import uuid
from .choices import ORDER_STATUS


class BaseModel(models.Model):
    """
    An abstract base model providing a UUID as the primary key.

    Fields:
        id (UUIDField): A unique identifier for the model instance, generated by default.
    """

    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
    )

    class Meta:
        abstract = True


class Order(BaseModel):
    """
    Represents a customer order, including associated items, table number, and status.

    Fields:
        table_number (IntegerField): The number of the table placing the order. Must be unique and >= 1.
        items (ManyToManyField): A relationship to the `Item` model representing the items in the order.
        status (CharField): The current status of the order. Defaults to "Pending".
            Possible choices are defined in `ORDER_STATUS`.

    Properties:
        total_price (float): Calculates and returns the total price of all items in the order.

    Methods:
        __str__: Returns a string representation of the order in the format "table_number - status".

    Meta:
        verbose_name: A human-readable singular name for the model ("Order").
        verbose_name_plural: A human-readable plural name for the model ("Orders").
    """

    table_number = models.IntegerField(
        validators=[MinValueValidator(1)],
        null=False,
    )
    items = models.ManyToManyField(
        to="Item",
        null=False,
    )
    status = models.CharField(
        max_length=20,
        choices=ORDER_STATUS,
        null=False,
        blank=False,
        default="Pending",
    )
    start = models.DateTimeField(
        null=False,
    )
    until = models.DateTimeField(
        null=False,
    )

    @property
    def total_price(self):
        """
        Calculates the total price of all items in the order.

        Returns:
            float: The total price of the order.
        """
        return sum(item.price for item in self.items.all())

    def __str__(self):
        """
        Returns a string representation of the order.

        Returns:
            str: A string in the format "table_number - status".
        """
        return f"{self.table_number} - {self.status}"

    class Meta:
        verbose_name = "Order"
        verbose_name_plural = "Orders"


class Item(BaseModel):
    """
    Represents an item that can be added to an order.

    Fields:
        title (CharField): The name of the item. Cannot be null or blank.
        description (CharField): A brief description of the item. Cannot be null or blank.
        price (FloatField): The price of the item. Must be >= 0.

    Methods:
        __str__: Returns a string representation of the item (its title).

    Meta:
        verbose_name: A human-readable singular name for the model ("Item").
        verbose_name_plural: A human-readable plural name for the model ("Items").
    """

    title = models.CharField(
        max_length=50,
        null=False,
        blank=False,
    )
    description = models.CharField(
        max_length=50,
        null=False,
        blank=False,
    )
    price = models.FloatField(
        validators=[MinValueValidator(0)],
        null=False,
    )

    def __str__(self):
        """
        Returns a string representation of the item.

        Returns:
            str: The title of the item.
        """
        return self.title

    class Meta:
        verbose_name = "Item"
        verbose_name_plural = "Items"
